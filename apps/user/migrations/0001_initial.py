# Generated by Django 2.0.3 on 2021-01-03 01:16

from django.conf import settings
import django.contrib.auth.validators
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('lodging', '0001_initial'),
        ('auth', '0009_alter_user_last_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('mobile_number', models.CharField(db_index=True, max_length=16, primary_key=True, serialize=False, validators=[django.core.validators.RegexValidator('^[789][0-9]{9}$')])),
                ('password', models.CharField(help_text='Password should be atleast of 8 charaters. It should consists of atleast one digit, one small alphabet and one capital alphabet.', max_length=100, validators=[django.core.validators.MinLengthValidator(8, message='Password must be atleast 8 characters long.')])),
                ('email', models.EmailField(blank=True, max_length=254, null=True, validators=[django.core.validators.RegexValidator('[a-zA-Z][a-zA-Z0-9-\\._]+@[a-zA-Z]+\\.[a-zA-Z]{1,3}')])),
                ('first_name', models.CharField(blank=True, max_length=30, null=True, validators=[django.core.validators.RegexValidator('^[a-zA-Z]{3,}$')])),
                ('last_name', models.CharField(blank=True, max_length=30, null=True, validators=[django.core.validators.RegexValidator('^[a-zA-Z]{3,}$')])),
                ('is_allowed', models.BooleanField(default=False, help_text='Profile is not completed yet.')),
                ('status', models.CharField(choices=[('B', 'Blocked'), ('W', 'Warned'), ('R', 'Regular')], default='R', max_length=1)),
                ('is_verified', models.BooleanField(default=False)),
                ('gender', models.CharField(blank=True, choices=[('M', 'Male'), ('F', 'Female')], max_length=1, null=True)),
                ('created_at', models.DateTimeField(auto_now=True)),
                ('updated_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('favorite_properties', models.ManyToManyField(related_name='favorite_of', to='lodging.Lodging')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Agreement',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now=True)),
                ('title', models.CharField(default='Agreement', max_length=200)),
                ('user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='agreements', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='AgreementPoint',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('text', models.CharField(default='', max_length=200)),
                ('created_at', models.DateTimeField(auto_now=True)),
                ('updated_at', models.DateTimeField(auto_now_add=True)),
                ('agreement', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='points', to='user.Agreement')),
            ],
        ),
        migrations.CreateModel(
            name='ContactModel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=50, null=True, validators=[django.core.validators.RegexValidator(message='Enter a valid name.', regex='^[a-zA-Z ]+$')])),
                ('email', models.EmailField(blank=True, max_length=254, null=True, validators=[django.core.validators.RegexValidator('[a-zA-Z][a-zA-Z0-9-\\._]+@[a-zA-Z]+\\.[a-zA-Z]{1,3}', message='Email address is not valid.')])),
                ('mobile_number', models.CharField(blank=True, max_length=16, null=True, validators=[django.core.validators.RegexValidator('^[789][0-9]{9}$', message='Mobile number is not valid.')])),
                ('message', models.TextField(help_text='Message can contain digits, alphabets, space, comma and period', max_length=2000, validators=[django.core.validators.RegexValidator('^[0-9A-Za-z ,.]{10,}$', message='Enter a valid message.')])),
                ('subject', models.CharField(help_text='Subject can contain digits, alphabets, space, comma and period', max_length=100, validators=[django.core.validators.RegexValidator('^[0-9A-Za-z ,.]+$', message='Enter a valid subject.')])),
                ('sent_on', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='MobileNumber',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('value', models.CharField(max_length=16, unique=True, validators=[django.core.validators.RegexValidator('^[789][0-9]{9}$', message='Enter a valid mobile number.')])),
                ('is_verified', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='mobile_numbers', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='SharedProperty',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('address', models.CharField(max_length=200)),
                ('created_at', models.DateTimeField(auto_now=True)),
                ('updated_at', models.DateTimeField(auto_now_add=True)),
                ('details', models.CharField(blank=True, max_length=1000, null=True)),
                ('rent', models.CharField(blank=True, max_length=10, null=True)),
                ('owner_number', models.CharField(max_length=16)),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
    ]
